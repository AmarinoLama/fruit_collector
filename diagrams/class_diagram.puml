@startuml
skinparam classAttributeIconSize 0
class GameRepository {
  GameRepository? instance
  final Database db
  +Future<Game?> getGameBySpace({required int space})
  +Future<void> updateGameBySpace({required Game game})
  +Future<int> insertGame({required int space})
  +Future<void> deleteGameBySpace({required int space})
}
class AchievementRepository {
  AchievementRepository? instance
  final Database db
  +Future<Achievement?> getAchievement(int achievementId)
  +Future<GameAchievement?> getGameAchievement(int gameId, int achievementId)
  +Future<void> resetGameAchievements(int gameId)
  +Future<void> updateGameAchievement(GameAchievement gameAchievement)
  +Future<int> insertGameAchievement(int gameId, int achievementId)
}
class LevelRepository {
  LevelRepository? instance
  final Database db
  +Future<Level?> getLevel(int levelId)
  +Future<GameLevel?> getGameLevel(int gameId, int levelId)
  +Future<int> insertGameLevel(GameLevel gameLevel)
  +Future<void> updateGameLevel(GameLevel gameLevel)
}
class GameCharacterRepository {
  GameCharacterRepository? instance
  final Database db
  +Future<void> insertCharactersForGame({required int gameId})
  +Future<void> deleteGameCharactersByGameId({required int gameId})
}
class SettingsRepository {
  SettingsRepository? instance
  final Database db
  +Future<void> insertDefaultsForGame({required int gameId})
  +Future<void> updateSettings(Settings settings)
  +Future<Settings?> getSettings(int gameId)
}
class GameAchievementRepository {
  GameAchievementRepository? instance
  final Database db
  +Future<void> insertAchievementsForGame({required int gameId})
}
class CharacterRepository {
  CharacterRepository? instance
  final Database db
  +Future<Character?> getCharacter(int characterId)
  +Future<GameCharacter?> getGameCharacter(int gameId, int characterId)
  +Future<void> resetGameCharacters(int gameId)
  +Future<void> updateGameCharacter(GameCharacter gameCharacter)
  +Future<int> insertGameCharacter(int gameId, int characterId)
}
class GameLevelRepository {
  GameLevelRepository? instance
  final Database db
  num get defaultUnlockedLevels
  +Future<void> insertLevelsForGame({required int gameId})
  +Future<void> deleteGameLevelByGameId({required int gameId})
}
class GameLevel {
  int id
  int levelId
  int gameId
  bool completed
  bool unlocked
  int stars
  DateTime dateCompleted
  DateTime lastTimeCompleted
  int? time
  int deaths
  +String toString()
}
class GameCharacter {
  int id
  int gameId
  int characterId
  bool unlocked
  bool equipped
  DateTime dateUnlocked
  +String toString()
}
class GameAchievement {
  int id
  int gameId
  int achievementId
  DateTime dateAchieved
  bool achieved
  +String toString()
}
class Level {
  Player player
  String levelName
  TiledComponent level
  List<CollisionBlock> collisionBlocks
  final Stopwatch levelTimer
  int lastMinDeaths
  int lastMinTime
  int deathCount
  int starsCollected
  int get levelTime
  Duration deathDuration
  GameLevel? levelData
  +Future<void> chargeLevel(GameLevel? level)
  +void _startLevel()
  +void registerDeath()
  +void stopLevelTimer()
  +void resumeLevelTimer()
  +void _addGameText()
  +void respawnObjects()
  +void _spawningObjects()
  +Future<void> saveLevel()
  +void openDoor(int doorId)
  +void starCollected()
  +void _addCollisions()
  +void addSpawnPoint(var spawnPoint)
  +void addCollisionBlock(CollisionBlock collisionBlock)
  +void removeCollisionBlock(CollisionBlock collisionBlock)
  +bool checkpointEnabled()
  +bool _hasFruits()
  +void _scrollingBackground()
}
class Game {
  int id
  DateTime createdAt
  DateTime lastTimePlayed
  int space
  int currentLevel
  int totalDeaths
  int totalTime
  +String toString()
}
class Character {
  int id
  String name
  String description
  int requiredStars
  +Character copy()
  +String toString()
}
class Achievement {
  int id
  String title
  String description
  int difficulty
  +String toString()
}
class Settings {
  int id
  int gameId
  double hudSize
  double controlSize
  bool isLeftHanded
  bool showControls
  bool isMusicActive
  bool isSoundEnabled
  double gameVolume
  double musicVolume
  +String toString()
}
class AchievementService {
  AchievementService? instance
  final AchievementRepository achievementRepository
  +Future<void> unlockAchievement(int gameId, int achievementId)
  +Future<void> resetAchievementsForGame(int gameId)
  +Future<GameAchievement?> getGameAchievementByIds({required int gameId, required int achievementId})
}
class GameService {
  GameService? instance
  final GameRepository gameRepository
  final SettingsRepository settingsRepository
  final GameLevelRepository gameLevelRepository
  final GameAchievementRepository gameAchievementRepository
  final GameCharacterRepository gameCharacterRepository
  +Future<void> saveGameBySpace({required Game? game})
  +Future<Game> getLastPlayedOrCreate()
  +Future<void> unlockEverythingForGame({required int space})
  +Future<Game> getOrCreateGameBySpace({required int space})
  +Future<Game?> getGameBySpace({required int space})
  +Future<void> deleteGameBySpace({required int space})
}
class SettingsService {
  SettingsService? instance
  final SettingsRepository settingsRepository
  +Future<void> updateSettings(Settings settings)
  +Future<Settings?> getSettingsForGame(int gameId)
}
class LevelService {
  LevelService? instance
  final LevelRepository levelRepository
  +Future<GameLevel?> getGameLevelByGameAndLevelName({required int gameId, required String levelName})
}
class CharacterService {
  CharacterService? instance
  final CharacterRepository characterRepository
  +Future<void> unlockCharacter(int gameId, int characterId)
  +Future<void> equipCharacter(int gameId, int characterId)
  +Future<void> resetCharactersForGame(int gameId)
  +Future<String> getEquippedCharacterName(int gameId)
  +Future<Character> getEquippedCharacter(int gameId)
}
class DatabaseManager {
  DatabaseManager? instance
  final Database database
  Database get database
  +Future<void> resetDatabase()
  +Future<void> _initDatabase()
  +Future<void> initializeDB(Database db)
}
class AchievementManager {
  FruitCollector game
  List<Map<String, dynamic>> allAchievements
  +Future<void> evaluate()
  +void _showAchievementUnlocked(Achievement achievement)
  +void tryShowNextToast()
}
class CollisionableWithHitbox <<Mixin>> {
  RectangleHitbox hitbox
  +bool checkCollision(CollisionBlock block, {Vector2? hitboxOffset})
}
class NotificationService {
  final NotificationService instance
  bool initialized
  +Future<void> initialize()
  +Future<void> _requestAndroidNotificationPermission()
  +Future<void> cancelAllNotifications()
}
class CustomHitbox {
  double offsetX
  double offsetY
  double width
  double height
}
class Door {
  int id
  Function(CollisionBlock) addCollisionBlock
  Function(CollisionBlock) removeCollisionBlock
  const stepTime
  final textureSize
  final SpriteAnimation closeAnimation
  final SpriteAnimation openAnimation
  CollisionBlock? collisionBlock
  +void _loadAllAnimations()
  +void openDoor()
  +SpriteAnimation _spriteAnimation(String state, int amount)
}
class CollisionBlock {
  bool isPlatform
  bool isSand
  +Future<void> onLoad()
}
class AlternatingBlock {
  bool isRed
  SpriteComponent spriteComponent
  Sprite blockActive
  Sprite blockInactive
  bool isRedActive
  bool timerStarted
  final List<AlternatingBlock> instances
  RectangleHitbox hitbox
  bool isActive
  +Future<void> onLoad()
  +void _loadSprites()
  +Sprite _getTile(int col, int row)
  +void _startPeriodicToggle()
  +void _updateSprite()
  +void onCollision(Set<Vector2> intersectionPoints, PositionComponent other)
}
class LootBox {
  Function(CollisionBlock) addCollisionBlock
  Function(CollisionBlock) removeCollisionBlock
  Function(dynamic) addSpawnPoint
  String objectInside
  const bounceHeight
  int hp
  final Player player
  CollisionBlock collisionBlock
  final SpriteAnimation idleAnimation
  final SpriteAnimation hitAnimation
  const stepTime
  const tileSize
  final textureSize
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation(String state, int amount)
  +void collidedWithPlayer()
  +void dropObject()
}
class FallingBlock {
  int fallingDuration
  Vector2 initialPosition
  bool isSideSensible
  SpriteAnimationComponent sprite
  bool isFalling
  double fixedDeltaTime
  double accumulatedTime
  Vector2 fallingVelocity
  bool isOnGround
  bool hasCollided
  bool isPlayerOnPlatform
  Player player
  List<CollisionBlock> collisionBlocks
  +Future<void> onLoad()
  +void update(double dt)
  +void _startFalling()
  +void _stopFalling()
  +void _comeBack()
  +bool _checkPlayerOnPlatform()
  +bool _checkBlockCollisionBelow(Vector2 delta)
}
class Trampoline {
  double powerBounce
  Function(CollisionBlock) addCollisionBlock
  const stepTime
  const tileSize
  final textureSize
  final SpriteAnimation idleAnimation
  final SpriteAnimation jumpAnimation
  CollisionBlock collisionBlock
  final Player player
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation(String state, int amount)
  +void collidedWithPlayer()
}
class Saw {
  bool isVertical
  double offNeg
  double offPos
  const double sawSpeed
  const moveSpeed
  const tileSize
  double moveDirection
  double rangeNeg
  double rangePos
  +void update(double dt)
  +void _moveVertically(double dt)
  +void _moveHorizontally(double dt)
}
class AirEffect {
  Paint airPaint
  double offsetX
  const double lineSpacing
  const double lineLength
  const double lineHeight
  const double speed
  List<double> horizontalOffsets
  +void render(Canvas canvas)
  +void update(double dt)
}
class Spike {
  String wallPosition
  final int cols
  final int rows
  const double spikeSize
  RectangleHitbox hitbox
  const double halfRotation
  +Future<void> _loadRepeatedSpikes()
  +void onCollisionStart(Set<Vector2> intersectionPoints, PositionComponent other)
}
class FireBlock {
  int startIn
  String fireDirection
  Function(CollisionBlock) addCollisionBlock
  final SpriteAnimation onAnimation
  final SpriteAnimation offAnimation
  final SpriteAnimationGroupComponent<FireBlockState> fireSprite
  const stepTime
  const double tileSize
  bool isOn
  final Map<int, int> fireBlockCounters
  CollisionBlock collisionBlock
  RectangleHitbox attackHitbox
  const double halfRotation
  +Future<void> onLoad()
  +void onRemove()
  +void rotate()
  +void _loadAnimations()
  +SpriteAnimation _spriteAnimation(String state, int amount)
  +void _startPeriodicToggle()
  +void onCollision(Set<Vector2> intersectionPoints, PositionComponent other)
  +void removeSound()
}
class Fan {
  bool directionRight
  double fanDistance
  Function(CollisionBlock) addCollisionBlock
  const stepTime
  const tileSize
  final textureSize
  CollisionBlock collisionBlock
  final SpriteAnimation offAnimation
  final SpriteAnimation onAnimation
  final Player player
  final fanDirection
  final Vector2 windVelocity
  +void createHitbox()
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation(String state, int amount)
  +void collidedWithPlayer()
  +void onCollisionEnd(PositionComponent other)
}
class GameText {
  +void onMount()
  +void render(Canvas canvas)
}
class ConfettiEmitterComponent {
  Vector2 origin
  int count
  double lifespan
  +Future<void> onLoad()
}
class Stars {
  String name
  double stepTime
  bool collected
  const int maxStarsPerLevel
  +void collidedWithPlayer()
}
class DeathZone {
  +Future<void> onLoad()
  +void onCollision(Set<Vector2> intersectionPoints, PositionComponent other)
}
class Player {
  String character
  SpriteAnimation idleAnimation
  SpriteAnimation runningAnimation
  SpriteAnimation jumpingAnimation
  SpriteAnimation fallingAnimation
  SpriteAnimation hitAnimation
  SpriteAnimation appearingAnimation
  SpriteAnimation disappearingAnimation
  SpriteAnimation doubleJumpingAnimation
  SpriteAnimation wallSlideAnimation
  const stepTime
  double gravity
  double jumpForce
  double maximunVelocity
  double terminalVelocity
  double moveSpeed
  bool hasReached
  double horizontalMovement
  Vector2 statringPosition
  Vector2 velocity
  Vector2 windVelocity
  bool isOnGround
  bool isOnWall
  bool isOnSand
  bool hasJumped
  int jumpCount
  double fixedDeltaTime
  double accumulatedTime
  bool hasDoubleJumped
  const maxJumps
  int lastWall
  bool gotHit
  bool isRespawning
  bool isLeftKeyPressed
  bool isRightKeyPressed
  bool isDownPressed
  List<CollisionBlock> collisionBlocks
  CustomHitbox hitbox
  +void update(double dt)
  +bool onKeyEvent(KeyEvent event, Set<LogicalKeyboardKey> keysPressed)
  +void onCollisionStart(Set<Vector2> intersectionPoints, PositionComponent other)
  +void onCollision(Set<Vector2> intersectionPoints, PositionComponent other)
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation(String state, int amount, {double stepTime = stepTime})
  +SpriteAnimation _specialSpriteAnimation(String state, int amount)
  +void _updatePlayerMovement(double dt)
  +void _playerJump(double dt)
  +void _updatePlayerState()
  +void _checkHorizontalCollisions()
  +void _applyGravity(double dt)
  +void _checkVerticalCollisions()
  +Future<void> _respawn()
  +Future<void> _animationRespawn()
  +Future<void> _reachedCheckpoint(Checkpoint other)
  +void collidedWithEnemy()
  +void updateCharacter()
  +void loadNewCharacterAnimations()
}
class Fruit {
  String fruit
  AudioPool collectFruit
  double stepTime
  final hitbox
  bool collected
  +void collidedWithPlayer()
}
class Checkpoint {
  bool isLastLevel
  final SpriteAnimation idleAnimation
  final SpriteAnimation flagOutAnimation
  final SpriteAnimation noFlagAnimation
  +void onCollisionStart(Set<Vector2> intersectionPoints, PositionComponent other)
  +Future<void> _reachedCheckpoint()
  +void _loadAllAnimations()
}
class PeeShooter {
  double range
  int lookDirection
  List<CollisionBlock> collisionBlocks
  Function(dynamic) addSpawnPoint
  const stepTime
  const tileSize
  const bounceHeight
  final textureSize
  double rangeNeg
  double rangePos
  bool gotStomped
  final Player player
  double fixedDeltaTime
  double accumulatedTime
  bool isAtacking
  bool isDuringCoolDown
  const attackCouldDown
  final projectileSize
  Vector2 projectileVelocity
  RectangleHitbox hitbox
  final SpriteAnimation idleAnimation
  final SpriteAnimation attackAnimation
  final SpriteAnimation hitAnimation
  Vector2 velocity
  +void update(double dt)
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation(String state, int amount)
  +void _calculateRange()
  +Future<void> attack()
  +void shootProjectile()
  +bool checkPlayerInRange()
  +void collidedWithPlayer()
}
class Ghost {
  int spawnIn
  Vector2 initialPosition
  final SpriteAnimation appearingAnimation
  final SpriteAnimation movingAnimation
  final SpriteAnimation disappearingAnimation
  final Vector2 spriteSize
  const double stepTime
  final List<Sprite> trailSprites
  double timeSinceLastParticle
  const double particleInterval
  final Player player
  double speed
  bool isLookingRight
  double fixedDeltaTime
  double accumulatedTime
  bool isActive
  +SpriteAnimation _spriteAnimation(String state, int amount)
  +void onRemove()
  +Future<void> _loadTrailSprites()
  +void _spawn()
  +void respawn()
  +void _loadAllAnimations()
  +void update(double dt)
  +void _emitTrailParticle(double dt)
  +void _move(double dt)
  +void lookLeft()
  +void lookRight()
  +void onCollision(Set<Vector2> intersectionPoints, PositionComponent other)
}
class Rock {
  List<CollisionBlock> collisionBlocks
  double offNeg
  double offPos
  RockType type
  Function(dynamic) addSpawnPoint
  Vector2 spawnPosition
  Vector2 spriteSizeRock1
  Vector2 spriteSizeRock2
  Vector2 spriteSizeRock3
  final SpriteAnimation idleAnimation
  final SpriteAnimation runAnimation
  final SpriteAnimation hitAnimation
  const tileSize
  final rangeNeg
  final rangePos
  bool isTurningBack
  Vector2 velocity
  const runSpeed
  const stepTime
  double moveDirection
  double gravity
  double maximunVelocity
  double terminalVelocity
  RectangleHitbox hitbox
  final Player player
  const bounceHeight
  bool gotStomped
  double fixedDeltaTime
  double accumulatedTime
  +void update(double dt)
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation(String state, int amount, Vector2 size)
  +void _movement(double dt)
  +void _applyGravity(double dt)
  +void _checkVerticalCollisions()
  +void turnBack(double direction)
  +void splitRock()
  +void collidedWithPlayer()
}
class Bee {
  double offNeg
  double offPos
  List<CollisionBlock> collisionBlocks
  Function(dynamic) addSpawnPoint
  const stepTime
  const tileSize
  const runSpeed
  const bounceHeight
  final textureSize
  double rangeNeg
  double rangePos
  double moveDirection
  double targetDirection
  bool gotStomped
  final Player player
  double fixedDeltaTime
  double accumulatedTime
  bool isAtacking
  bool isDuringCoolDown
  const attackCouldDown
  final projectileSize
  Vector2 projectileVelocity
  final SpriteAnimation idleAnimation
  final SpriteAnimation attackAnimation
  final SpriteAnimation hitAnimation
  Vector2 velocity
  +void update(double dt)
  +void _loadAllAnimations()
  +void _checkHorizontalCollisions()
  +SpriteAnimation _spriteAnimation(String state, int amount)
  +void _calculateRange()
  +void _movement(double dt)
  +Future<void> attack()
  +void shootProjectile()
  +bool playerInRange()
  +bool playerBelow()
  +void collidedWithPlayer()
}
class Radish {
  double offNeg
  double offPos
  List<CollisionBlock> collisionBlocks
  Vector2 spawnPosition
  final SpriteAnimation idleAnimation
  final SpriteAnimation flyingAnimation
  final SpriteAnimation runAnimation
  final SpriteAnimation hitAnimation
  const stepTime
  final textureSize
  RectangleHitbox hitbox
  const tileSize
  final rangePos
  final rangeNeg
  double moveDirection
  const flySpeed
  double sineTime
  bool isFlying
  Vector2 velocity
  double gravity
  double maximunVelocity
  double terminalVelocity
  double groundSpeed
  const bounceHeight
  final Player player
  bool gotStomped
  double fixedDeltaTime
  double accumulatedTime
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation(String state, int amount)
  +void update(double dt)
  +void _checkVerticalCollisions()
  +Future<void> _fly(double dt)
  +void _checkHorizontalCollisions()
  +void _movement(double dt)
  +void turnBack(double direction)
  +void _applyGravity(double dt)
  +void collidedWithPlayer()
}
class SpikeHead {
  bool isReversed
  final SpriteAnimation idleAnimation
  final SpriteAnimation atackDownAnimation
  final SpriteAnimation atackAnimation
  final SpriteAnimation atackTopAnimation
  double stepTime
  final textureSize
  CustomHitbox hitbox
  const Duration inmobileDuration
  bool isAtacking
  bool isComingBack
  const attackVelocity
  const comeBackVelocity
  const detectDistance
  Player player
  Vector2 initialPosition
  Vector2 velocity
  double fixedDeltaTime
  double accumulatedTime
  +void _loadAllStates()
  +SpriteAnimation _spriteAnimation(String state, int amount)
  +void onCollisionStart(Set<Vector2> intersectionPoints, PositionComponent other)
  +void _updateMovement(double dt)
  +void update(double dt)
  +void checkPlayerPosition()
  +void attack(int direction)
  +void comeBack()
}
class PlayerCollidable <<Mixin>> {
  final Player player
  +void collidedWithPlayer()
}
class PeeProjectile {
  Vector2 velocity
  Function(dynamic) addSpawnPoint
  final Player player
  final double lifeSpan
  final Vector2 particleSize
  +Future<void> onLoad()
  +void update(double dt)
  +void onCollision(Set<Vector2> intersectionPoints, PositionComponent other)
  +void destroyWithParticles()
}
class BeeProjectile {
  Vector2 velocity
  Function(dynamic) addSpawnPoint
  final Player player
  final double lifeSpan
  final Vector2 particleSize
  +Future<void> onLoad()
  +void update(double dt)
  +void onCollision(Set<Vector2> intersectionPoints, PositionComponent other)
  +void destroyWithParticles()
}
class Snail {
  double offNeg
  double offPos
  List<CollisionBlock> collisionBlocks
  int doorId
  const stepTime
  const tileSize
  double runSpeed
  const bounceHeight
  final textureSize
  Random random
  bool isOnGround
  double rangeNeg
  double rangePos
  double moveDirection
  double targetDirection
  bool gotStomped
  final Player player
  double fixedDeltaTime
  double accumulatedTime
  int hp
  double gravity
  double jumpForce
  double maximunVelocity
  double terminalVelocity
  int timeToJump
  int timeToTransformShell
  int timeToTransformSnail
  double noFlipDifference
  RectangleHitbox hitbox
  final SpriteAnimation idleAnimation
  final SpriteAnimation walkAnimation
  final SpriteAnimation hitAnimation
  final SpriteAnimation shellWallHitAnimation
  final SpriteAnimation shellIdleAnimation
  Vector2 velocity
  +void onRemove()
  +void update(double dt)
  +void _loadAllAnimations()
  +void _checkVerticalCollisions()
  +void _applyGravity(double dt)
  +void _checkHorizontalCollisions()
  +SpriteAnimation _spriteAnimation(String state, int amount)
  +void _startJumpTimer()
  +void _startTransformShellTimer()
  +void _startTransformSnailTimer()
  +void _transformSnail()
  +void _transformShell()
  +void _jump()
  +void _calculateRange()
  +void _movement(double dt)
  +bool playerInRange()
  +void collidedWithPlayer()
  +bool isSnail()
  +Future<void> spawnConfetti(Vector2 atPosition)
}
class Chicken {
  double offNeg
  double offPos
  List<CollisionBlock> collisionBlocks
  const stepTime
  const tileSize
  const runSpeed
  const bounceHeight
  final textureSize
  double rangeNeg
  double rangePos
  double moveDirection
  double targetDirection
  bool gotStomped
  final Player player
  double fixedDeltaTime
  double accumulatedTime
  final SpriteAnimation idleAnimation
  final SpriteAnimation runAnimation
  final SpriteAnimation hitAnimation
  Vector2 velocity
  +void update(double dt)
  +void _loadAllAnimations()
  +void _checkHorizontalCollisions()
  +SpriteAnimation _spriteAnimation(String state, int amount)
  +void _calculateRange()
  +void _movement(double dt)
  +bool playerInRange()
  +void _updateState()
  +void collidedWithPlayer()
}
class SoundManager {
  final SoundManager instance
  Map<String, AudioPlayer> players
  Duration jumpCooldown
  DateTime? lastJump
  Timer? rockheadLoopTimer
  bool initialized
  int mutedVolume
  +factory SoundManager()
  +Future<void> init()
  +Future<void> _load(String key, String assetPath)
  +void play(String key, double volume)
  +void playCollectFruit(double volume)
  +void playHit(double volume)
  +void playBounce(double volume)
  +void playDisappear(double volume)
  +void playSmash(double volume)
  +void playRockheadAttacking(double volume)
  +void playAppearGhost(double volume)
  +void playDisappearGhost(double volume)
  +void playFire(double volume)
  +void playGlitch(double volume)
  +void playJump(double volume)
  +void startRockheadAttackingLoop(double volume, {Duration interval = const Duration(milliseconds: 500)
  +void stopRockheadAttackingLoop()
  +Future<void> dispose()
  +void startDefaultBGM(Settings settings)
  +void startBossBGM(Settings settings)
  +void startCreditsBGM(Settings settings)
  +void startMenuBGM(Settings settings)
  +void stopBGM()
  +void pauseAll()
  +void resumeAll()
}
class CreditsScreen {
  Function gameAdd
  Function gameRemove
  FruitCollector game
  List<_ScrollingCreditLine> creditLines
  Vector2 screenSize
  RectangleComponent fadeOverlay
  _FadeUpdateComponent fadeUpdateComponent
  bool hasFinished
  +Future<void> show()
  +void _startFadeOverlay()
  +void _spawnCreditLines()
  +void _onCreditsFinished()
}
class _ScrollingCreditLine {
  double screenHeight
  double speed
  VoidCallback? onRemoved
  +void update(double dt)
}
class _FadeUpdateComponent {
  +void update(double dt)
}
class DeathScreen {
  Function gameAdd
  Function gameRemove
  FruitCollector game
  final random
  RectangleComponent blackScreen
  TextComponent? defeatedTextComponent
  TextComponent? defeatedTextShadow
  List<TextComponent> xComponents
  +Future<void> addBlackScreen(int deaths)
  +Future<void> removeBlackScreen()
}
class ChangeLevelScreen {
  double durationMs
  VoidCallback onExpandEnd
  double radius
  double elapsed
  TransitionPhase phase
  final double maxRadius
  final Vector2 center
  bool endFunctionExecuted
  bool showLevelSummary
  bool get isHud
  +Future<void> onLoad()
  +void render(Canvas canvas)
  +void update(double dt)
  +void startContract()
  +void startExpand()
}
class LevelSummaryOverlay {
  VoidCallback onContinue
  FruitCollector game
  String get levelName
  int get difficulty
  int get deaths
  int get stars
  int get time
  +Widget build(BuildContext context)
  +Widget _iconValue({required IconData icon, required String value, required TextStyle style})
  +Widget _starsRow(int count)
  +String _formatTime(int seconds)
  +String _difficultyText(int value)
}
class LoadingBanana {
  FruitCollector game
  final buttonSize
  +Future<void> show()
  +void onGameResize(Vector2 size)
}
class BackgroundTile {
  String color
  double scrollSpeed
}
class CharacterManager {
  FruitCollector game
  List<Map<String, dynamic>> allCharacters
  +Future<void> evaluate()
  +void _showCharacterUnlocked(Character character)
  +void tryShowNextToast()
}
class TextStyleSingleton {
  final TextStyleSingleton instance
  +factory TextStyleSingleton()
}
class LevelSelection {
  double buttonSize
  bool isAvaliable
  +void onTapDown(TapDownEvent event)
}
class AchievementsButton {
  double buttonSize
  bool isAvaliable
  +void onTapDown(TapDownEvent event)
}
class CustomJoystick {
  double controlSize
  double leftMargin
  JoystickComponent joystick
  Player player
  bool wasIdle
  +Future<void> onLoad()
  +void _addJoystick()
  +void update(double dt)
  +void onGameResize(Vector2 size)
  +void _updateJoystick()
  +void onTapDown(TapDownEvent event)
  +void onTapUp(TapUpEvent event)
}
class JumpButton {
  double buttonSize
  SpriteComponent buttonSprite
  +void onGameResize(Vector2 gameSize)
  +void _setSizeAndPosition(Vector2 gameSize)
  +void onTapDown(TapDownEvent event)
  +void onTapUp(TapUpEvent event)
}
class OpenMenuButton {
  double buttonSize
  bool isAvaliable
  +void onGameResize(Vector2 size)
  +void onTapDown(TapDownEvent event)
}
class ChangePlayerSkinButton {
  double buttonSize
  bool isAvaliable
  +void onTapDown(TapDownEvent event)
}
class PauseMenu {
  const String id
  FruitCollector game
  +Widget build(BuildContext context)
}
class PauseMenuVM {
  FruitCollector game
  final TextStyle textStyle
  String get pauseTitle
  String get resumeLabel
  String get settingsLabel
  String get mainMenuLabel
  bool get canResume
  +void initialize()
  +void resumeGame()
  +void openSettings()
  +void goToMainMenu()
}
class SettingsMenu {
  const String id
  FruitCollector game
  +Widget build(BuildContext context)
}
class ToggleMusicVolumeWidget {
  FruitCollector game
  Function updateMusicVolume
}
class _ToggleMusicVolumeWidgetState {
  FruitCollector game
  Function updateMusicVolume
  bool isMuted
  double value
  bool isSliderActive
  +Widget build(BuildContext context)
  +double? onChanged(dynamic value)
  +void changeState()
}
class ResizeHUD {
  FruitCollector game
  Function updateSizeHUD
}
class _ResizeHUDState {
  FruitCollector game
  Function updateSizeHUD
  double value
  +Widget build(BuildContext context)
  +double? onChanged(dynamic value)
}
class ResizeControls {
  FruitCollector game
  Function updateSizeControls
  Function updateIsLeftHanded
  Function updateShowControls
}
class _ResizeControlsState {
  FruitCollector game
  Function updateSizeControls
  Function updateIsLeftHanded
  Function updateShowControls
  double value
  bool isLeftHanded
  bool showControls
  bool get isDesktop
  +Widget build(BuildContext context)
  +double? onChanged(dynamic value)
}
class NumberSlider {
  FruitCollector game
  double value
  double minValue
  Function(dynamic) onChanged
  bool isActive
  +_NumberSliderState createState()
}
class _NumberSliderState {
  FruitCollector game
  double value
  Function(dynamic) onChanged
  bool isActive
  +set setValue(double newValue)
  +void didUpdateWidget(covariant NumberSlider oldWidget)
  +Widget build(BuildContext context)
}
class ToggleGameVolumeWidget {
  FruitCollector game
  Function updateGameVolume
}
class _ToggleGameVolumeWidgetState {
  FruitCollector game
  Function updateGameVolume
  bool isMuted
  double value
  bool isSliderActive
  +Widget build(BuildContext context)
  +double? onChanged(dynamic value)
  +void changeState()
}
class SettingsMenuViewModel {
  double hudSize
  double controlSize
  double gameVolume
  double musicVolume
  bool isLeftHanded
  bool showControls
  FruitCollector game
  +void init({required FruitCollector game})
  +void updateHudSize(double value)
  +void updateControlSize(double value)
  +void updateGameVolume(double value)
  +void updateMusicVolume(double value)
  +void updateIsLeftHanded(bool value)
  +void updateShowControls(bool value)
  +void applySettings()
  +void backToPauseMenu()
  +void confirmAndBackToPauseMenu()
}
class MainMenu {
  const String id
  FruitCollector game
  +Widget build(BuildContext context)
}
class GameSelector {
  const String id
  FruitCollector game
  +Widget build(BuildContext context)
}
class BackgroundWidget {
}
class _BackgroundWidgetState {
  List<String> gifPaths
  int currentGif
  Timer gifTimer
  Color baseColor
  +void initState()
  +void dispose()
  +Widget build(BuildContext context)
}
class SlotButton {
  Game? gameSlot
  int slotNumber
  Color textColor
  ButtonStyle style
  VoidCallback onPressed
  VoidCallback onDelete
  +Widget build(BuildContext context)
}
class DeleteSlotModal {
  int slotNumber
  Color textColor
  Color baseColor
  Color borderColor
  VoidCallback onCancel
  VoidCallback onConfirm
  +Widget build(BuildContext context)
}
class MenuButton {
  String label
  IconData icon
  ButtonStyle style
  VoidCallback onPressed
  bool enabled
  +Widget build(BuildContext context)
}
class TickerProviderStub {
  +Ticker createTicker(TickerCallback onTick)
}
class MainMenuVM {
  FruitCollector game
  TickerProvider vsync
  final AnimationController logoController
  final Animation<double> logoAnimation
  GameService service
  Game lastGame
  bool isSoundOn
  bool isLoading
  bool get isSoundOn
  bool get isLoading
  String get titleText
  String get continueLabel
  String get loadGameLabel
  String get quitLabel
  +Future<void> initialize(BuildContext context)
  +bool isMobile(BuildContext context)
  +Future<void> _loadLastGame()
  +void _applyInitialMusic()
  +void toggleVolume()
  +Future<void> onContinuePressed()
  +void onLoadGamePressed()
  +void onQuitPressed()
  +void dispose()
}
class GameSelectorVM {
  FruitCollector game
  Game? slot1
  Game? slot2
  Game? slot3
  GameService? gameService
  int? slotToDelete
  Game? get slot1
  Game? get slot2
  Game? get slot3
  int? get slotToDelete
  String get titleText
  String get backLabel
  +Future<void> _ensureGameService()
  +Future<void> loadSlots()
  +Future<void> selectSlot(int slotNumber)
  +void confirmDelete(int slotNumber)
  +void cancelDelete()
  +Future<void> deleteSlot(int slotNumber)
  +void goBackToMainMenu()
}
class AchievementMenu {
  FruitCollector game
  List<Map<String, dynamic>> achievements
  const String id
}
class _AchievementMenuState {
  ScrollController scrollController
  const double rowHeight
  const double rowSpacing
  +void _scrollByRow({required bool forward})
  +void _onBack()
  +Widget build(BuildContext context)
  +void dispose()
}
class AchievementDetails {
  FruitCollector game
  Achievement achievement
  GameAchievement gameAchievement
  const String id
  +Widget build(BuildContext context)
  +void _onBack()
}
class AchievementToast {
  const String id
  Achievement achievement
  VoidCallback onDismiss
  FruitCollector game
  +Widget build(BuildContext context)
}
class AchievementMenuVM {
  ScrollController scrollController
  List<Map<String, dynamic>> achievements
  const double rowHeight
  const double rowSpacing
  +void scrollByRow({required bool forward})
  +void dispose()
}
class BaseModel {
  bool disposed
  String? errorTitle
  String? errorDescription
  String? emptyTitle
  String? emptyDescription
  bool busy
  bool get busy
  bool isEmpty
  bool hasErrors
  +void dispose()
  +void notifyListeners()
  +void setBusy(bool value)
  +void setEmpty({bool empty = true})
  +void setError({String? errorTitle, String? errorDescription})
}
class LevelSelectionMenu {
  const String id
  int totalLevels
  FruitCollector game
  +Widget build(BuildContext context)
}
class LevelCard {
  int levelNumber
  VoidCallback? onTap
  Color cardColor
  Color textColor
  int difficulty
  bool isLocked
  bool isCompleted
  bool isCurrentLevel
  int stars
  int duration
  int deaths
  +Color _calculateBorderColor()
  +Color _lighten(Color color, double amount)
  +Widget build(BuildContext context)
}
class LevelSelectionMenuVM {
  ScrollController scrollController
  const double cardSpacing
  +void scrollByRow({required bool forward, required double rowSize})
  +void dispose()
}
class CharacterToast {
  const String id
  Character character
  VoidCallback onDismiss
  FruitCollector game
  +Widget build(BuildContext context)
}
class CharacterSelection {
  const String id
  FruitCollector game
  +Widget build(BuildContext context)
}
class CharacterCardFlip {
  double angle
  bool isFrontVisible
  bool isUnlocked
  Character character
  double size
  VoidCallback onTap
  +Widget build(BuildContext context)
  +Widget _buildFront()
  +Widget _buildBack()
}
class CharacterSelectionVM {
  final AnimationController animationController
  final Animation<double> rotation
  bool isFront
  FruitCollector game
  int selectedCharacterIndex
  int numCharacters
  final int userStars
  Character get currentCharacter
  GameCharacter get currentGameCharacter
  double get angle
  +void _notifyListeners()
  +void refreshFromGame()
  +void _initializeData()
  +void nextCharacter()
  +void previousCharacter()
  +void selectCharacter()
  +void goBack()
  +void flipCard()
  +void dispose()
}
class BaseWidget {
  T? model
  Widget? child
  +final Function(T)
  +final Function(T)
}
class _BaseWidgetState {
  T? model
  +void initState()
  +Widget build(BuildContext context)
}
class FruitCollector {
  CameraComponent cam
  GameService? gameService
  LevelService? levelService
  SettingsService? settingsService
  AchievementService? achievementService
  CharacterService? characterService
  Player player
  Level level
  Character character
  Settings settings
  bool isOnMenu
  List<Map<String, dynamic>> levels
  List<Map<String, dynamic>> achievements
  List<Map<String, dynamic>> characters
  bool duringBlackScreen
  bool duringRemovingBlackScreen
  CustomJoystick customJoystick
  ChangePlayerSkinButton? changeSkinButton
  OpenMenuButton? menuButton
  LevelSelection? levelSelectionButton
  AchievementsButton? achievementsButton
  JumpButton? jumpButton
  bool isJoystickAdded
  final Vector2 leftControlPosition
  final AchievementManager achievementManager
  final CharacterManager characterManager
  bool isShowingAchievementToast
  bool isShowingCharacterToast
  Map<String, List<dynamic>> pendingToasts
  Achievement? currentShowedAchievement
  int? currentMenuIndexShowedCharacter
  Character? currentToastShowedCharacter
  Achievement? currentAchievement
  GameAchievement? currentGameAchievement
  Map<int, int> levelTimes
  Map<int, int> levelDeaths
  final soundManager
  +Color backgroundColor()
  +Future<void> chargeSlot(int space)
  +void loadButtonsAndHud()
  +void initializateButtons()
  +void addOverlays()
  +void reloadAllButtons()
  +void removeControls()
  +void addAllButtons()
  +void updateGlobalStats()
  +Future<void> completeLevel()
  +void _loadActualLevel()
  +void addJoystick()
  +Future<void> getGameService()
  +Future<void> getLevelService()
  +Future<void> getAchievementService()
  +Future<void> getCharacterService()
  +Future<void> getSettingsService()
  +void toggleBlockButtons(bool isLocked)
  +void toggleBlockWindowResize(bool isLocked)
  +void updateCharacter()
  +void pauseEngine()
  +void resumeEngine()
}
GameRepository --> GameRepository
AchievementRepository --> AchievementRepository
LevelRepository --> LevelRepository
GameCharacterRepository --> GameCharacterRepository
SettingsRepository --> SettingsRepository
GameAchievementRepository --> GameAchievementRepository
CharacterRepository --> CharacterRepository
GameLevelRepository --> GameLevelRepository
Level --> Player
Level --> GameLevel
AchievementService --> AchievementService
GameService --> GameService
SettingsService --> SettingsService
LevelService --> LevelService
CharacterService --> CharacterService
DatabaseManager --> DatabaseManager
AchievementManager --> FruitCollector
Door --> CollisionBlock
LootBox --> CollisionBlock
FallingBlock --> Player
Trampoline --> CollisionBlock
FireBlock --> CollisionBlock
Fan --> CollisionBlock
Player --> CustomHitbox
SpikeHead --> CustomHitbox
SpikeHead --> Player
CreditsScreen --> FruitCollector
CreditsScreen --> _FadeUpdateComponent
DeathScreen --> FruitCollector
LevelSummaryOverlay --> FruitCollector
LoadingBanana --> FruitCollector
CharacterManager --> FruitCollector
CustomJoystick --> Player
PauseMenu --> FruitCollector
PauseMenuVM --> FruitCollector
SettingsMenu --> FruitCollector
ToggleMusicVolumeWidget --> FruitCollector
_ToggleMusicVolumeWidgetState --> FruitCollector
ResizeHUD --> FruitCollector
_ResizeHUDState --> FruitCollector
ResizeControls --> FruitCollector
_ResizeControlsState --> FruitCollector
NumberSlider --> FruitCollector
_NumberSliderState --> FruitCollector
ToggleGameVolumeWidget --> FruitCollector
_ToggleGameVolumeWidgetState --> FruitCollector
SettingsMenuViewModel --> FruitCollector
MainMenu --> FruitCollector
GameSelector --> FruitCollector
SlotButton --> Game
MainMenuVM --> FruitCollector
MainMenuVM --> GameService
MainMenuVM --> Game
GameSelectorVM --> FruitCollector
GameSelectorVM --> Game
GameSelectorVM --> GameService
AchievementMenu --> FruitCollector
AchievementDetails --> FruitCollector
AchievementDetails --> Achievement
AchievementDetails --> GameAchievement
AchievementToast --> Achievement
AchievementToast --> FruitCollector
LevelSelectionMenu --> FruitCollector
CharacterToast --> Character
CharacterToast --> FruitCollector
CharacterSelection --> FruitCollector
CharacterCardFlip --> Character
CharacterSelectionVM --> FruitCollector
FruitCollector --> GameService
FruitCollector --> LevelService
FruitCollector --> SettingsService
FruitCollector --> AchievementService
FruitCollector --> CharacterService
FruitCollector --> Player
FruitCollector --> Level
FruitCollector --> Character
FruitCollector --> Settings
FruitCollector --> CustomJoystick
FruitCollector --> ChangePlayerSkinButton
FruitCollector --> OpenMenuButton
FruitCollector --> LevelSelection
FruitCollector --> AchievementsButton
FruitCollector --> JumpButton
FruitCollector --> Achievement
FruitCollector --> GameAchievement
@enduml
