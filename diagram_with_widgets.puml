@startuml
skinparam classAttributeIconSize 0
class GameRepository {
  Database _db
  return null
  return null
  return gameId
  +Future<GameRepository> getInstance()
  +Future<Game?> getGameBySpace()
  +Future<void> updateGameBySpace()
  +Future<int> insertGame()
  +Future<void> deleteGameBySpace()
}
class AchievementRepository {
  Database _db
  +Future<AchievementRepository> getInstance()
  +Future<Achievement?> getAchievement()
  +Future<GameAchievement?> getGameAchievement()
  +Future<void> resetGameAchievements()
  +Future<void> updateGameAchievement()
  +Future<int> insertGameAchievement()
}
class LevelRepository {
  Database _db
  +Future<LevelRepository> getInstance()
  +Future<Level?> getLevel()
  +Future<GameLevel?> getGameLevel()
  +Future<int> insertGameLevel()
  +Future<void> updateGameLevel()
}
class GameCharacterRepository {
  Database _db
  final character
  +Future<GameCharacterRepository> getInstance()
  +Future<void> insertCharactersForGame()
  +Future<void> deleteGameCharactersByGameId()
}
class SettingsRepository {
  Database _db
  +Future<SettingsRepository> getInstance()
  +Future<void> insertDefaultsForGame()
  +Future<void> updateSettings()
  +Future<Settings?> getSettings()
}
class GameAchievementRepository {
  Database _db
  +Future<GameAchievementRepository> getInstance()
  +Future<void> insertAchievementsForGame()
}
class CharacterRepository {
  Database _db
  +Future<CharacterRepository> getInstance()
  +Future<Character?> getCharacter()
  +Future<GameCharacter?> getGameCharacter()
  +Future<void> resetGameCharacters()
  +Future<void> updateGameCharacter()
  +Future<int> insertGameCharacter()
}
class GameLevelRepository {
  Database _db
  get defaultUnlockedLevels
  final level
  +Future<GameLevelRepository> getInstance()
  +Future<void> insertLevelsForGame()
  +Future<void> deleteGameLevelByGameId()
}
class GameLevel {
  int id
  int levelId
  int gameId
  bool completed
  bool unlocked
  int stars
  DateTime dateCompleted
  DateTime lastTimeCompleted
  int deaths
  +GameLevel fromMap()
  +String toString()
}
class GameCharacter {
  int id
  int gameId
  int characterId
  bool unlocked
  bool equipped
  DateTime dateUnlocked
  +GameCharacter fromMap()
  +String toString()
}
class GameAchievement {
  int id
  int gameId
  int achievementId
  DateTime dateAchieved
  bool achieved
  +GameAchievement fromMap()
  +String toString()
}
class Level {
  Player player
  String levelName
  TiledComponent level
  List<CollisionBlock> collisionBlocks
  Stopwatch _levelTimer
  int lastMinDeaths
  int lastMinTime
  int deathCount
  int starsCollected
  return lastMinTime
  return lastMinTime
  return lastMinDeaths
  return lastMinDeaths
  return starsCollected
  +Future<void> chargeLevel()
  +void _startLevel()
  +void registerDeath()
  +void stopLevelTimer()
  +void resumeLevelTimer()
  +void _addGameText()
  +void respawnObjects()
  +void _spawningObjects()
  +Future<void> saveLevel()
  +void openDoor()
  +void starCollected()
  +void _addCollisions()
  +void addSpawnPoint()
  +void addCollisionBlock()
  +void removeCollisionBlock()
  +bool checkpointEnabled()
  +bool _hasFruits()
  +void _scrollingBackground()
}
class Game {
  int id
  DateTime createdAt
  DateTime lastTimePlayed
  int space
  int currentLevel
  int totalDeaths
  int totalTime
  +Game fromMap()
  +String toString()
}
class Character {
  int id
  String name
  String description
  int requiredStars
  +Character copy()
  +Character fromMap()
  +String toString()
}
class Achievement {
  int id
  String title
  String description
  int difficulty
  +Achievement fromMap()
  +String toString()
}
class Settings {
  int id
  int gameId
  double hudSize
  double controlSize
  bool isLeftHanded
  bool showControls
  bool isMusicActive
  bool isSoundEnabled
  double gameVolume
  double musicVolume
  +Settings fromMap()
  +String toString()
}
class AchievementService {
  AchievementRepository _achievementRepository
  +Future<AchievementService> getInstance()
  +Future<void> unlockAchievement()
  +Future<void> resetAchievementsForGame()
  +Future<GameAchievement?> getGameAchievementByIds()
}
class GameService {
  GameRepository _gameRepository
  SettingsRepository _settingsRepository
  GameLevelRepository _gameLevelRepository
  GameAchievementRepository _gameAchievementRepository
  GameCharacterRepository _gameCharacterRepository
  return newGame
  +Future<GameService> getInstance()
  +Future<void> saveGameBySpace()
  +Future<Game> getLastPlayedOrCreate()
  +Future<void> unlockEverythingForGame()
  +Future<Game> getOrCreateGameBySpace()
  +Future<Game?> getGameBySpace()
  +Future<void> deleteGameBySpace()
}
class SettingsService {
  SettingsRepository _settingsRepository
  +Future<SettingsService> getInstance()
  +Future<void> updateSettings()
  +Future<Settings?> getSettingsForGame()
}
class LevelService {
  LevelRepository _levelRepository
  final nextLevelId
  +Future<LevelService> getInstance()
  +next level()
  +else if()
  +Future<GameLevel?> getGameLevelByGameAndLevelName()
  +throw Exception()
}
class CharacterService {
  CharacterRepository _characterRepository
  GameCharacter selected
  bool isTarget
  bool isTarget
  +Future<CharacterService> getInstance()
  +Future<void> unlockCharacter()
  +Future<void> equipCharacter()
  +Future<void> resetCharactersForGame()
  +Future<String> getEquippedCharacterName()
  +Future<Character> getEquippedCharacter()
}
class DatabaseManager {
  Database _database
  get database
  +Future<DatabaseManager> getInstance()
  +Future<void> resetDatabase()
  +Future<void> _initDatabase()
  +Future<void> initializeDB()
  +FOREIGN KEY()
  +FOREIGN KEY()
  +FOREIGN KEY()
  +FOREIGN KEY()
  +FOREIGN KEY()
  +FOREIGN KEY()
  +FOREIGN KEY()
}
class AchievementManager {
  FruitCollector game
  dynamic>> allAchievements
  Achievement achievement
  GameAchievement gameAchievement
  final condition
  +Future<void> evaluate()
  +void _showAchievementUnlocked()
  +void tryShowNextToast()
  +const Duration()
}
class CustomHitbox {
  double offsetX
  double offsetY
  double width
  double height
}
class Door {
  int id
  const stepTime
  SpriteAnimation _closeAnimation
  SpriteAnimation _openAnimation
  +void _loadAllAnimations()
  +void openDoor()
  +SpriteAnimation _spriteAnimation()
}
class CollisionBlock <<Widget>> {
  bool isPlatform
  bool isSand
  +Future<void> onLoad()
}
class AlternatingBlock {
  bool isRed
  SpriteComponent spriteComponent
  Sprite blockActive
  Sprite blockInactive
  bool isRedActive
  bool _timerStarted
  List<AlternatingBlock> _instances
  RectangleHitbox hitbox
  bool isActive
  +Future<void> onLoad()
  +void _loadSprites()
  +Sprite _getTile()
  +void _startPeriodicToggle()
  +const Duration()
  +void _updateSprite()
  +void onCollision()
}
class LootBox {
  String objectInside
  const _bounceHeight
  int hp
  Player player
  CollisionBlock collisionBlock
  SpriteAnimation _idleAnimation
  SpriteAnimation _hitAnimation
  const stepTime
  const tileSize
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation()
  +void collidedWithPlayer()
  +void dropObject()
}
class FallingBlock {
  int fallingDuration
  Vector2 initialPosition
  bool isSideSensible
  bool isFalling
  double fixedDeltaTime
  double accumulatedTime
  bool isOnGround
  bool hasCollided
  bool isPlayerOnPlatform
  Player player
  List<CollisionBlock> collisionBlocks
  final delta
  bool isWithinX
  final playerBottom
  final futureBottom
  final blockTop
  final intersectsVertically
  return true
  return false
  +Future<void> onLoad()
  +void update()
  +void _startFalling()
  +void _stopFalling()
  +void _comeBack()
  +the platform()
  +bool _checkPlayerOnPlatform()
  +bool _checkBlockCollisionBelow()
}
class Trampoline {
  double powerBounce
  const stepTime
  const tileSize
  SpriteAnimation _idleAnimation
  SpriteAnimation _jumpAnimation
  CollisionBlock collisionBlock
  Player player
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation()
  +void collidedWithPlayer()
}
class Saw {
  bool isVertical
  double offNeg
  double offPos
  double sawSpeed
  const moveSpeed
  const tileSize
  double moveDirection
  double rangeNeg
  double rangePos
  +void update()
  +void _moveVertically()
  +void _moveHorizontally()
}
class AirEffect <<Widget>> {
  double offsetX
  double lineSpacing
  double lineLength
  double lineHeight
  double speed
  List<double> _horizontalOffsets
  int row
  final deviation
  +void render()
  +void update()
}
class Spike <<Widget>> {
  String wallPosition
  int cols
  int rows
  double spikeSize
  RectangleHitbox hitbox
  double halfRotation
  SpriteComponent spike
  double angleS
  +Future<void> _loadRepeatedSpikes()
  +void onCollisionStart()
}
class FireBlock <<Widget>> {
  int startIn
  String fireDirection
  SpriteAnimation onAnimation
  SpriteAnimation offAnimation
  SpriteAnimationGroupComponent<FireBlockState> fireSprite
  const stepTime
  double tileSize
  bool isOn
  int> _fireBlockCounters
  CollisionBlock collisionBlock
  RectangleHitbox attackHitbox
  Timer timer
  double halfRotation
  Vector2 collisionPosition
  double spriteAngle
  final isFirstInstance
  +Future<void> onLoad()
  +void onRemove()
  +void rotate()
  +void _loadAnimations()
  +SpriteAnimation _spriteAnimation()
  +void _startPeriodicToggle()
  +const Duration()
  +void onCollision()
  +void removeSound()
}
class Fan {
  bool directionRight
  double fanDistance
  const stepTime
  const tileSize
  CollisionBlock collisionBlock
  SpriteAnimation _offAnimation
  SpriteAnimation _onAnimation
  Player player
  final fanDirection
  +void createHitbox()
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation()
  +void collidedWithPlayer()
  +void onCollisionEnd()
}
class GameText {
  +void onMount()
  +void render()
  +const TextStyle()
}
class ConfettiEmitterComponent <<Widget>> {
  Vector2 origin
  int count
  double lifespan
  +Future<void> onLoad()
}
class Stars {
  String name
  double stepTime
  bool collected
  int maxStarsPerLevel
  +void collidedWithPlayer()
}
class DeathZone <<Widget>> {
  +Future<void> onLoad()
  +void onCollision()
}
class Player {
  String character
  SpriteAnimation idleAnimation
  SpriteAnimation runningAnimation
  SpriteAnimation jumpingAnimation
  SpriteAnimation fallingAnimation
  SpriteAnimation hitAnimation
  SpriteAnimation appearingAnimation
  SpriteAnimation disappearingAnimation
  SpriteAnimation doubleJumpingAnimation
  SpriteAnimation wallSlideAnimation
  const stepTime
  double _gravity
  double _jumpForce
  double _maximunVelocity
  double _terminalVelocity
  double moveSpeed
  bool hasReached
  double horizontalMovement
  bool isOnGround
  bool isOnWall
  bool isOnSand
  bool hasJumped
  int jumpCount
  double fixedDeltaTime
  double accumulatedTime
  bool hasDoubleJumped
  const maxJumps
  int lastWall
  bool gotHit
  bool isRespawning
  bool isLeftKeyPressed
  bool isRightKeyPressed
  bool isDownPressed
  List<CollisionBlock> collisionBlocks
  PlayerState playerState
  final isOnRightWall
  final currentWall
  +void update()
  +bool onKeyEvent()
  +void onCollisionStart()
  +void onCollision()
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation()
  +SpriteAnimation _specialSpriteAnimation()
  +void _updatePlayerMovement()
  +void _playerJump()
  +void _updatePlayerState()
  +else if()
  +void _checkHorizontalCollisions()
  +void _applyGravity()
  +void _checkVerticalCollisions()
  +else if()
  +void _respawn()
  +Future<void> _animationRespawn()
  +void _reachedCheckpoint()
  +else if()
  +void collidedWithEnemy()
  +void updateCharacter()
  +void loadNewCharacterAnimations()
}
class Fruit {
  String fruit
  AudioPool collectFruit
  double stepTime
  bool collected
  +void collidedWithPlayer()
}
class Checkpoint {
  bool isLastLevel
  SpriteAnimation _idleAnimation
  SpriteAnimation _flagOutAnimation
  SpriteAnimation _noFlagAnimation
  String route
  +void onCollisionStart()
  +void _reachedCheckpoint()
  +void _loadAllAnimations()
}
class PeeShooter {
  double range
  int lookDirection
  List<CollisionBlock> collisionBlocks
  const stepTime
  const tileSize
  const _bounceHeight
  double rangeNeg
  double rangePos
  bool gotStomped
  Player player
  double fixedDeltaTime
  double accumulatedTime
  bool isAtacking
  bool isDuringCoolDown
  const attackCouldDown
  SpriteAnimation _idleAnimation
  SpriteAnimation _attackAnimation
  SpriteAnimation _hitAnimation
  final playerOffset
  final playerX
  +void update()
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation()
  +void _calculateRange()
  +Future<void> attack()
  +const Duration()
  +void shootProjectile()
  +bool checkPlayerInRange()
  +void collidedWithPlayer()
}
class Ghost {
  int spawnIn
  Vector2 initialPosition
  SpriteAnimation _appearingAnimation
  SpriteAnimation _movingAnimation
  SpriteAnimation _disappearingAnimation
  double stepTime
  List<Sprite> trailSprites
  double _timeSinceLastParticle
  double _particleInterval
  Player player
  double speed
  bool isLookingRight
  double fixedDeltaTime
  double accumulatedTime
  bool _isActive
  final threshold
  double playerCenter
  +SpriteAnimation _spriteAnimation()
  +void onRemove()
  +Future<void> _loadTrailSprites()
  +void _spawn()
  +void respawn()
  +const Duration()
  +void _loadAllAnimations()
  +void update()
  +void _emitTrailParticle()
  +void _move()
  +else if()
  +void lookLeft()
  +void lookRight()
  +void onCollision()
}
class Rock {
  List<CollisionBlock> collisionBlocks
  double offNeg
  double offPos
  RockType type
  Vector2 spawnPosition
  SpriteAnimation _idleAnimation
  SpriteAnimation _runAnimation
  SpriteAnimation _hitAnimation
  const tileSize
  final rangeNeg
  final rangePos
  bool isTurningBack
  const runSpeed
  const stepTime
  double moveDirection
  double _gravity
  double _maximunVelocity
  double _terminalVelocity
  Player player
  const _bounceHeight
  bool gotStomped
  double fixedDeltaTime
  double accumulatedTime
  +void update()
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation()
  +void _movement()
  +else if()
  +void _applyGravity()
  +void _checkVerticalCollisions()
  +void turnBack()
  +void splitRock()
  +void collidedWithPlayer()
}
class Bee {
  double offNeg
  double offPos
  List<CollisionBlock> collisionBlocks
  const stepTime
  const tileSize
  const runSpeed
  const _bounceHeight
  double rangeNeg
  double rangePos
  double moveDirection
  double targetDirection
  bool gotStomped
  Player player
  double fixedDeltaTime
  double accumulatedTime
  bool isAtacking
  bool isDuringCoolDown
  const attackCouldDown
  SpriteAnimation _idleAnimation
  SpriteAnimation _attackAnimation
  SpriteAnimation _hitAnimation
  double midBeeX
  +void update()
  +void _loadAllAnimations()
  +void _checkHorizontalCollisions()
  +SpriteAnimation _spriteAnimation()
  +void _calculateRange()
  +void _movement()
  +Future<void> attack()
  +const Duration()
  +void shootProjectile()
  +bool playerInRange()
  +bool playerBelow()
  +void collidedWithPlayer()
}
class Radish {
  double offNeg
  double offPos
  List<CollisionBlock> collisionBlocks
  Vector2 spawnPosition
  SpriteAnimation _idleAnimation
  SpriteAnimation _flyingAnimation
  SpriteAnimation _runAnimation
  SpriteAnimation _hitAnimation
  const stepTime
  const tileSize
  final rangePos
  final rangeNeg
  double moveDirection
  const flySpeed
  double sineTime
  bool isFlying
  double _gravity
  double _maximunVelocity
  double _terminalVelocity
  double groundSpeed
  const _bounceHeight
  Player player
  bool gotStomped
  double fixedDeltaTime
  double accumulatedTime
  final radishBottom
  final blockTop
  const slowdownMargin
  const amplitude
  const frequency
  +Movement logic()
  +Movement logic()
  +void _loadAllAnimations()
  +SpriteAnimation _spriteAnimation()
  +void update()
  +void _checkVerticalCollisions()
  +void _fly()
  +else if()
  +void _checkHorizontalCollisions()
  +else if()
  +void _movement()
  +void turnBack()
  +void _applyGravity()
  +void collidedWithPlayer()
}
class SpikeHead {
  bool isReversed
  SpriteAnimation _idleAnimation
  SpriteAnimation _atackDownAnimation
  SpriteAnimation _atackAnimation
  SpriteAnimation _atackTopAnimation
  double stepTime
  bool isAtacking
  bool isComingBack
  const attackVelocity
  const comeBackVelocity
  const detectDistance
  Player player
  Vector2 initialPosition
  double fixedDeltaTime
  double accumulatedTime
  final rockheadVisionLeft
  final rockheadVisionRight
  final playerY
  final rockheadY
  final isAligned
  final isAbove
  +void _loadAllStates()
  +SpriteAnimation _spriteAnimation()
  +void onCollisionStart()
  +void _updateMovement()
  +void update()
  +void checkPlayerPosition()
  +else if()
  +void attack()
  +void comeBack()
}
class PeeProjectile <<Widget>> {
  Vector2 velocity
  Player player
  double lifeSpan
  +Future<void> onLoad()
  +void update()
  +void onCollision()
  +void destroyWithParticles()
}
class BeeProjectile <<Widget>> {
  Vector2 velocity
  Player player
  double lifeSpan
  +Future<void> onLoad()
  +void update()
  +void onCollision()
  +void destroyWithParticles()
}
class Snail {
  double offNeg
  double offPos
  List<CollisionBlock> collisionBlocks
  int doorId
  const stepTime
  const tileSize
  double runSpeed
  const _bounceHeight
  bool isOnGround
  double rangeNeg
  double rangePos
  double moveDirection
  double targetDirection
  bool gotStomped
  Player player
  double fixedDeltaTime
  double accumulatedTime
  int hp
  double _gravity
  double _jumpForce
  double _maximunVelocity
  double _terminalVelocity
  int timeToJump
  int timeToTransformShell
  int timeToTransformSnail
  double _noFlipDifference
  Timer transformShellTimer
  Timer jumpTimer
  SpriteAnimation _idleAnimation
  SpriteAnimation _walkAnimation
  SpriteAnimation _hitAnimation
  SpriteAnimation _shellWallHitAnimation
  SpriteAnimation _shellIdleAnimation
  +void onRemove()
  +void update()
  +void _loadAllAnimations()
  +void _checkVerticalCollisions()
  +void _applyGravity()
  +void _checkHorizontalCollisions()
  +SpriteAnimation _spriteAnimation()
  +void _startJumpTimer()
  +void _startTransformShellTimer()
  +void _startTransformSnailTimer()
  +void _transformSnail()
  +void _transformShell()
  +void _jump()
  +void _calculateRange()
  +void _movement()
  +else if()
  +bool playerInRange()
  +void collidedWithPlayer()
  +bool isSnail()
  +Future<void> spawnConfetti()
}
class Chicken {
  double offNeg
  double offPos
  List<CollisionBlock> collisionBlocks
  const stepTime
  const tileSize
  const runSpeed
  const _bounceHeight
  double rangeNeg
  double rangePos
  double moveDirection
  double targetDirection
  bool gotStomped
  Player player
  double fixedDeltaTime
  double accumulatedTime
  SpriteAnimation _idleAnimation
  SpriteAnimation _runAnimation
  SpriteAnimation _hitAnimation
  +void update()
  +void _loadAllAnimations()
  +void _checkHorizontalCollisions()
  +SpriteAnimation _spriteAnimation()
  +void _calculateRange()
  +void _movement()
  +bool playerInRange()
  +void _updateState()
  +void collidedWithPlayer()
}
class SoundManager {
  AudioPlayer> _players
  bool _initialized
  int mutedVolume
  final player
  +Future<void> init()
  +Future<void> _load()
  +void play()
  +void playJump()
  +void startRockheadAttackingLoop()
  +void stopRockheadAttackingLoop()
  +Future<void> dispose()
  +void startDefaultBGM()
  +void startBossBGM()
  +void startCreditsBGM()
  +void startMenuBGM()
  +void stopBGM()
  +void pauseAll()
  +void resumeAll()
}
class CreditsScreen <<Widget>> {
  Function gameAdd
  Function gameRemove
  FruitCollector game
  List<_ScrollingCreditLine> creditLines
  Vector2 screenSize
  RectangleComponent _fadeOverlay
  _FadeUpdateComponent _fadeUpdateComponent
  bool _hasFinished
  double durationInSeconds
  double elapsed
  double spacing
  double startY
  double titleFontSize
  String rawText
  bool isLast
  double yOffset
  String char
  final color
  double yOffset
  +Future<void> show()
  +void _startFadeOverlay()
  +void _spawnCreditLines()
  +Pixel Adventure()
  +Sound Engineers()
  +on calculators()
  +THE END()
  +void _onCreditsFinished()
}
class _ScrollingCreditLine {
  double screenHeight
  double speed
  +void update()
}
class _FadeUpdateComponent <<Widget>> {
  +void update()
}
class DeathScreen {
  Function gameAdd
  Function gameRemove
  FruitCollector game
  RectangleComponent blackScreen
}
class variable {
  List<TextComponent> xComponents
  final xCount
  final t
  final t
  +Future<void> addBlackScreen()
  +const Color()
  +Future<void> removeBlackScreen()
}
class ChangeLevelScreen <<Widget>> {
  double durationMs
  VoidCallback onExpandEnd
  double radius
  double _elapsed
  TransitionPhase _phase
  double maxRadius
  Vector2 center
  bool endFunctionExecuted
  bool showLevelSummary
  get isHud
  +Future<void> onLoad()
  +void render()
  +void update()
  +else if()
  +void startContract()
  +void startExpand()
}
class LevelSummaryOverlay <<Widget>> {
  VoidCallback onContinue
  FruitCollector game
  get levelName
  get difficulty
  get deaths
  get stars
  get time
  double minWidth
  double maxWidth
  double minHeight
  double maxHeight
  int totalStars
  List<Widget> stars
  int minutes
  int remainingSeconds
  +Widget build()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +Widget _iconValue()
  +const SizedBox()
  +Widget _starsRow()
  +String _formatTime()
  +String _difficultyText()
}
class LoadingBanana {
  FruitCollector game
  final buttonSize
  +Future<void> show()
  +void onGameResize()
}
class BackgroundTile {
  String color
  double scrollSpeed
}
class CharacterManager {
  FruitCollector game
  dynamic>> allCharacters
  Character character
  GameCharacter gameCharacter
  final alreadyUnlocked
  +Future<void> evaluate()
  +void _showCharacterUnlocked()
  +void tryShowNextToast()
  +const Duration()
}
class TextStyleSingleton {
  return _instance
  +factory TextStyleSingleton()
}
class LevelSelection <<Widget>> {
  double buttonSize
  bool isAvaliable
  +void onTapDown()
}
class AchievementsButton <<Widget>> {
  double buttonSize
  bool isAvaliable
  +void onTapDown()
}
class CustomJoystick <<Widget>> {
  double controlSize
  double leftMargin
  JoystickComponent joystick
  Player player
  bool wasIdle
  Vector2 tapPosition
  double screenWidth
  double screenHeight
  bool isLeftSideTap
  bool isBottomHalf
  +Future<void> onLoad()
  +void _addJoystick()
  +void update()
  +else if()
  +void onGameResize()
  +void _updateJoystick()
  +void onTapDown()
  +void onTapUp()
}
class JumpButton <<Widget>> {
  double buttonSize
  SpriteComponent buttonSprite
  +? Vector2()
  +void onGameResize()
  +void _setSizeAndPosition()
  +? Vector2()
  +void onTapDown()
  +void onTapUp()
}
class OpenMenuButton <<Widget>> {
  double buttonSize
  bool isAvaliable
  +void onGameResize()
  +void onTapDown()
}
class ChangePlayerSkinButton <<Widget>> {
  double buttonSize
  bool isAvaliable
  +void onTapDown()
}
class ToggleMusicVolumeWidget <<Widget>> {
  FruitCollector game
  Function updateMusicVolume
}
class _ToggleMusicVolumeWidgetState <<Widget>> {
  FruitCollector game
  Function updateMusicVolume
  bool isMuted
  double value
  bool isSliderActive
  return null
  return value
  +Widget build()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +double? onChanged()
  +void changeState()
}
class ResizeHUD <<Widget>> {
  FruitCollector game
  Function updateSizeHUD
}
class _ResizeHUDState <<Widget>> {
  FruitCollector game
  Function updateSizeHUD
  double value
  return value
  +Widget build()
  +const SizedBox()
  +const SizedBox()
  +double? onChanged()
}
class ResizeControls <<Widget>> {
  FruitCollector game
  Function updateSizeControls
  Function updateIsLeftHanded
  Function updateShowControls
}
class _ResizeControlsState <<Widget>> {
  FruitCollector game
  Function updateSizeControls
  Function updateIsLeftHanded
  Function updateShowControls
  double value
  bool isLeftHanded
  bool showControls
  return value
  +Widget build()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +double? onChanged()
}
class SettingsMenu <<Widget>> {
  String id
  FruitCollector game
  double sizeHUD
  double sizeControls
  double gameVolume
  double musicVolume
  bool isLeftHanded
  bool showControls
  +Widget build()
  +const Size()
  +const SizedBox()
  +const Icon()
  +const SizedBox()
  +const Icon()
}
class ToggleGameVolumeWidget <<Widget>> {
  FruitCollector game
  Function updateGameVolume
}
class _ToggleGameVolumeWidgetState <<Widget>> {
  FruitCollector game
  Function updateGameVolume
  bool isMuted
  double value
  bool isSliderActive
  return null
  return value
  +Widget build()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +double? onChanged()
  +void changeState()
}
class BackgroundWidget <<Widget>> {
}
class _BackgroundWidgetState <<Widget>> {
  int _currentGif
  Timer _gifTimer
  +void initState()
  +const Duration()
  +void dispose()
  +Widget build()
}
class MainMenu <<Widget>> {
  String id
  FruitCollector game
}
class _MainMenuState <<Widget>> {
  AnimationController _logoController
  ButtonStyle buttonStyle
  bool _isSoundOn
  bool isLoading
  GameService service
  Game game
  +void initState()
  +const Duration()
  +const Size()
  +void dispose()
  +Widget _menuButton()
  +Widget build()
  +const BackgroundWidget()
  +const CircleBorder()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +Future<void> loadLastGame()
  +void _onVolumeToggle()
  +void _onContinuePressed()
  +void _onLoadGamePressed()
}
class GameSelector <<Widget>> {
  String id
  FruitCollector game
}
class _GameSelectorState <<Widget>> {
  final isEmpty
  final label
  final icon
  +void initState()
  +Future<void> _loadSlots()
  +Widget build()
  +const Size()
  +const Size()
  +const Size()
  +const BackgroundWidget()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const Icon()
  +const SizedBox()
  +Widget _buildSlot()
  +const SizedBox()
  +Widget _buildDeleteIcon()
  +void _confirmDelete()
  +Widget _buildCustomModal()
  +const SizedBox()
  +const SizedBox()
  +const Icon()
  +const Icon()
  +void _loadSlot()
  +Future<void> getGameService()
}
class PauseMenu <<Widget>> {
  String id
  FruitCollector game
  +Widget build()
  +const Size()
  +const Shadow()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
}
class AchievementMenu <<Widget>> {
  FruitCollector game
  dynamic>> achievements
  String id
}
class _AchievementMenuState <<Widget>> {
  double _rowHeight
  double _rowSpacing
  double currentOffset
  dynamic> achievementData
  Achievement achievement
  GameAchievement gameAchievement
  +void _scrollByRow()
  +void _onBack()
  +Widget build()
  +const BorderSide()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const TextStyle()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const Icon()
  +const SizedBox()
  +const Icon()
  +const SizedBox()
  +const Icon()
  +const CircleBorder()
  +const BoxConstraints()
  +void dispose()
}
class AchievementDetails <<Widget>> {
  FruitCollector game
  Achievement achievement
  GameAchievement gameAchievement
  String id
  double imageSize
  +Widget build()
  +const BorderSide()
  +const Icon()
  +void _onBack()
}
class AchievementToast <<Widget>> {
  String id
  Achievement achievement
  VoidCallback onDismiss
  FruitCollector game
  +Widget build()
  +void onTap()
  +const Offset()
  +const Icon()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const Icon()
}
class AchievementMenuVM {
  dynamic>> achievements
  double rowHeight
  double rowSpacing
  double currentOffset
  +void scrollByRow()
  +void dispose()
}
class NumberSlider <<Widget>> {
  FruitCollector game
  double value
  double minValue
  bool isActive
  +_NumberSliderState createState()
}
class _NumberSliderState <<Widget>> {
  FruitCollector game
  double value
  bool isActive
  +set setValue()
  +void didUpdateWidget()
  +Widget build()
}
class BaseModel {
  bool disposed
  bool _busy
  get busy
  bool isEmpty
  bool hasErrors
  +void dispose()
  +void notifyListeners()
  +void setBusy()
  +void setEmpty()
  +void setError()
}
class LevelSelectionMenu <<Widget>> {
  String id
  int totalLevels
  FruitCollector game
  double cardSpacing
  double minCardSize
  double minCardsPerRow
  double availableWidth
  double rowHeight
  double currentOffset
  double targetOffset
  int level
  +Widget build()
  +void onBack()
  +const BorderSide()
  +void scrollByRow()
  +const Duration()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const Icon()
  +const SizedBox()
  +const Icon()
  +const SizedBox()
  +const Icon()
  +const CircleBorder()
  +const BoxConstraints()
}
class LevelCard <<Widget>> {
  int levelNumber
  Color cardColor
  Color textColor
  int difficulty
  bool isLocked
  bool isCompleted
  bool isCurrentLevel
  int stars
  int duration
  int deaths
  double t
  String timeText
  String deathsText
  +Color _calculateBorderColor()
  +Color _lighten()
  +Widget build()
  +? _lighten()
  +const SizedBox()
  +const Icon()
  +const SizedBox()
  +const Icon()
  +? _calculateBorderColor()
}
class LevelSelectionMenuVM {
  double cardSpacing
  double rowHeight
  double currentOffset
  double targetOffset
  +void scrollByRow()
  +void dispose()
}
class CharacterToast <<Widget>> {
  String id
  Character character
  VoidCallback onDismiss
  FruitCollector game
  +Widget build()
  +void onTap()
  +const Offset()
  +const SizedBox()
  +const SizedBox()
  +const SizedBox()
  +const Icon()
}
class CharacterSelection <<Widget>> {
  String id
  FruitCollector game
  +Widget build()
  +const Icon()
  +const Icon()
  +const SizedBox()
  +const Icon()
  +const SizedBox()
  +const SizedBox()
  +const Icon()
}
class TickerProviderStub {
}
class CharacterCardFlip <<Widget>> {
  double angle
  bool isFrontVisible
  bool isUnlocked
  Character character
  double size
  VoidCallback onTap
  +Widget build()
  +? _buildFront()
  +Widget _buildFront()
  +const Color()
  +const Color()
  +Widget _buildBack()
  +const Color()
  +const Color()
}
class CharacterSelectionVM {
  AnimationController animationController
  Animation<double> rotation
  bool isFront
  FruitCollector game
  int selectedCharacterIndex
  int numCharacters
  int userStars
  get currentCharacter
  get currentGameCharacter
  get angle
  +void _notifyListeners()
  +void refreshFromGame()
  +void _initializeData()
  +void nextCharacter()
  +void previousCharacter()
  +void selectCharacter()
  +void goBack()
  +void flipCard()
  +void dispose()
}
class BaseWidget {
}
class _BaseWidgetState <<Widget>> {
  +void initState()
  +Widget build()
}
class FruitCollector <<Widget>> {
  CameraComponent cam
  Player player
  Level level
  Character character
  Settings settings
  bool isOnMenu
  dynamic>> levels
  dynamic>> achievements
  dynamic>> characters
  bool duringBlackScreen
  bool duringRemovingBlackScreen
  CustomJoystick customJoystick
  bool isJoystickAdded
  bool isShowingAchievementToast
  bool isShowingCharacterToast
  List<dynamic>> pendingToasts
  int> levelTimes
  int> levelDeaths
  final pixelAdventure
  final pixelAdventure
  int currentLevel
  GameLevel currentGameLevel
  GameLevel nextGameLevel
  final gameDeaths
  double width
  double height
  +Future<void> chargeSlot()
  +void loadButtonsAndHud()
  +void initializateButtons()
  +void addOverlays()
  +void reloadAllButtons()
  +void removeControls()
  +void addAllButtons()
  +void updateGlobalStats()
  +void completeLevel()
  +void _loadActualLevel()
  +void addJoystick()
  +Future<void> getGameService()
  +Future<void> getLevelService()
  +Future<void> getAchievementService()
  +Future<void> getCharacterService()
  +Future<void> getSettingsService()
  +void toggleBlockButtons()
  +void toggleBlockWindowResize()
  +else if()
  +void updateCharacter()
  +void pauseEngine()
  +void resumeEngine()
}
class CollisionableWithHitbox <<Mixin>> {
}
class PlayerCollidable <<Mixin>> {
}
Level --> Player
AchievementService --> AchievementRepository
GameService --> GameRepository
GameService --> SettingsRepository
GameService --> GameLevelRepository
GameService --> GameAchievementRepository
GameService --> GameCharacterRepository
SettingsService --> SettingsRepository
LevelService --> LevelRepository
CharacterService --> CharacterRepository
CharacterService --> GameCharacter
AchievementManager --> FruitCollector
AchievementManager --> Achievement
AchievementManager --> GameAchievement
AlternatingBlock --> CollisionBlock
LootBox --> Player
LootBox --> CollisionBlock
FallingBlock --> CollisionBlock
FallingBlock --> Player
Trampoline --> CollisionBlock
Trampoline --> Player
FireBlock --> CollisionBlock
Fan --> CollisionBlock
Fan --> Player
PeeShooter --> Player
Ghost --> Player
Rock --> Player
Bee --> Player
Radish --> Player
SpikeHead --> Player
PeeProjectile --> Player
BeeProjectile --> Player
Snail --> Player
Chicken --> Player
CreditsScreen --> FruitCollector
CreditsScreen --> _FadeUpdateComponent
DeathScreen --> FruitCollector
LevelSummaryOverlay --> FruitCollector
LoadingBanana --> FruitCollector
CharacterManager --> FruitCollector
CharacterManager --> Character
CharacterManager --> GameCharacter
CustomJoystick --> Player
_ToggleMusicVolumeWidgetState --> ToggleMusicVolumeWidget
_ToggleMusicVolumeWidgetState --> FruitCollector
ToggleMusicVolumeWidget --> FruitCollector
_ResizeHUDState --> ResizeHUD
_ResizeHUDState --> FruitCollector
ResizeHUD --> FruitCollector
_ResizeControlsState --> ResizeControls
_ResizeControlsState --> FruitCollector
ResizeControls --> FruitCollector
SettingsMenu --> FruitCollector
_ToggleGameVolumeWidgetState --> ToggleGameVolumeWidget
_ToggleGameVolumeWidgetState --> FruitCollector
ToggleGameVolumeWidget --> FruitCollector
_BackgroundWidgetState --> BackgroundWidget
_MainMenuState --> MainMenu
_MainMenuState --> GameService
_MainMenuState --> Game
MainMenu --> FruitCollector
_GameSelectorState --> GameSelector
GameSelector --> FruitCollector
PauseMenu --> FruitCollector
_AchievementMenuState --> AchievementMenu
_AchievementMenuState --> Achievement
_AchievementMenuState --> GameAchievement
AchievementMenu --> FruitCollector
AchievementDetails --> FruitCollector
AchievementDetails --> Achievement
AchievementDetails --> GameAchievement
AchievementToast --> Achievement
AchievementToast --> FruitCollector
_NumberSliderState --> NumberSlider
_NumberSliderState --> FruitCollector
NumberSlider --> FruitCollector
LevelSelectionMenu --> FruitCollector
CharacterToast --> Character
CharacterToast --> FruitCollector
CharacterSelection --> FruitCollector
CharacterCardFlip --> Character
CharacterSelectionVM --> BaseModel
CharacterSelectionVM --> FruitCollector
FruitCollector --> Player
FruitCollector --> Level
FruitCollector --> Character
FruitCollector --> Settings
FruitCollector --> CustomJoystick
FruitCollector --> GameLevel
@enduml
